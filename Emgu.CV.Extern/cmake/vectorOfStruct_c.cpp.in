//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2018 by EMGU Corporation. All rights reserved.
//
//  Vector of ${VECTOR_NAME}
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------

#include "vector_${VECTOR_NAME}.h"

${VECTOR_ADDITIONAL_CODE}

std::vector< ${VECTOR_ELEMENT} >* VectorOf${VECTOR_NAME}Create() 
{ 
   return new std::vector< ${VECTOR_ELEMENT} >(); 
}

std::vector< ${VECTOR_ELEMENT} >* VectorOf${VECTOR_NAME}CreateSize(int size) 
{ 
   return new std::vector< ${VECTOR_ELEMENT} >(size); 
}

int VectorOf${VECTOR_NAME}GetSize(std::vector< ${VECTOR_ELEMENT} >* v)
{
   return v->size();
}

void VectorOf${VECTOR_NAME}Push(std::vector< ${VECTOR_ELEMENT} >* v, ${VECTOR_ELEMENT}* value)
{
   v->push_back(*value);
}

void VectorOf${VECTOR_NAME}PushMulti(std::vector< ${VECTOR_ELEMENT} >* v,  ${VECTOR_ELEMENT}* values, int count)
{
   VectorPushMulti< ${VECTOR_ELEMENT} >(v, values, count);
}

void VectorOf${VECTOR_NAME}PushVector(std::vector< ${VECTOR_ELEMENT} >* v, std::vector< ${VECTOR_ELEMENT} >* other)
{  
   VectorOf${VECTOR_NAME}PushMulti(v,  &(*other)[0], other->size());
}

void VectorOf${VECTOR_NAME}Clear(std::vector< ${VECTOR_ELEMENT} >* v)
{
   v->clear();
}

void VectorOf${VECTOR_NAME}Release(std::vector< ${VECTOR_ELEMENT} >** v)
{
   delete *v;
   *v = 0;
}

void VectorOf${VECTOR_NAME}CopyData(std::vector< ${VECTOR_ELEMENT} >* v, ${VECTOR_ELEMENT}* data)
{
   VectorCopyData< ${VECTOR_ELEMENT} >(v, data);
}

${VECTOR_ELEMENT}* VectorOf${VECTOR_NAME}GetStartAddress(std::vector< ${VECTOR_ELEMENT} >* v)
{
   return v->empty() ? NULL : &(*v)[0];
}

void VectorOf${VECTOR_NAME}GetItem(std::vector<  ${VECTOR_ELEMENT} >* vec, int index,  ${VECTOR_ELEMENT} * element)
{
   *element = vec->at(index);
}

void VectorOf${VECTOR_NAME}GetItemPtr(std::vector<  ${VECTOR_ELEMENT} >* vec, int index,  ${VECTOR_ELEMENT}** element)
{ 
	*element = &vec->at(index);
}

cv::_InputArray* cvInputArrayFromVectorOf${VECTOR_NAME}(std::vector< ${VECTOR_ELEMENT} >* vec)
{
   return new cv::_InputArray(*vec);
}

cv::_OutputArray* cvOutputArrayFromVectorOf${VECTOR_NAME}(std::vector< ${VECTOR_ELEMENT} >* vec)
{
   return new cv::_OutputArray(*vec);
}

cv::_InputOutputArray* cvInputOutputArrayFromVectorOf${VECTOR_NAME}(std::vector< ${VECTOR_ELEMENT} >* vec)
{
   return new cv::_InputOutputArray(*vec);
}

int VectorOf${VECTOR_NAME}SizeOfItemInBytes()
{
   return sizeof(${VECTOR_ELEMENT});
}
